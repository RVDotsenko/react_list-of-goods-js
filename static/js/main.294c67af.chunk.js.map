{"version":3,"sources":["App.jsx","index.jsx"],"names":["renderedGoods","goodsWithId","map","good","name","id","self","crypto","randomUUID","SORT_VALUE_LENGTH","SORT_VALUE_REVERSE","isReversed","isAlpha","isLength","App","useState","sortValue","setSortValue","reverseArray","setReverseArray","visibleGoods","goods","sortField","preperedGoods","sort","good2","localeCompare","reverse","getPreperedGoods","isEqualToSourceGoods","i","length","className","text","Button","btnClass","type","onClick","Good","ReactDOM","render","document","getElementById"],"mappings":"uKAyBIA,E,0DAREC,EAbyB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGkCC,KAAI,SAAAC,GAAI,MAC1C,CACEC,KAAMD,EAENE,GAAIC,KAAKC,OAAOC,iBAOdC,EAAoB,SACtBC,EAAqB,UACrBC,GAAa,EACbC,GAAU,EACVC,GAAW,EAmDR,IAAMC,EAAM,WAQjB,IAPA,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EApDR,WAAoE,IAA1CC,EAAyC,uDAAjCpB,EAAaqB,EAAoB,uCAC7DC,EAAa,YAAOF,GA6CxB,OA3CIC,IAAcZ,GAChBa,EAAcC,MAAK,SAACrB,EAAMsB,GACxB,MAAkB,WAAdH,GACFT,GAAW,EACXD,GAAU,EACLD,EAIIc,EAAMrB,KAAKkB,GAAanB,EAAKC,KAAKkB,GAHlCnB,EAAKC,KAAKkB,GAAaG,EAAMrB,KAAKkB,IAO3B,SAAdA,GACFV,GAAU,EACVC,GAAW,EAEJV,EAAKmB,GAAWI,cAAcD,EAAMH,KAGtC,KAINA,IAAcZ,IAAsBC,GAClCW,IAAcb,IACfa,IAAcZ,IAChBC,GAAcA,GAGhBD,GAAsB,IACtBa,EAAcI,WAGE,UAAdL,IACFV,GAAU,EACVD,GAAa,EACbE,GAAW,EACXU,EAAa,YAAOtB,IAGtBD,EAAgBuB,EAETA,EAMcK,CACnB5B,EAAegB,EAAWE,GAExBW,GAAuB,EAElBC,EAAI,EAAGA,EAAIV,EAAaW,OAAQD,IAAK,CAC5C,GAAIV,EAAaU,GAAGzB,KAAOJ,EAAY6B,GAAGzB,GAEnC,CACLwB,GAAuB,EACvB,MAHAA,GAAuB,EAO3B,OACE,sBAAKG,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,CACEC,KAAK,sBACLhB,aAAcA,EACdK,UA/Ec,OAgFdN,UAAWA,IAGb,cAAC,EAAD,CACEiB,KAAK,iBACLhB,aAAcA,EACdK,UAAWb,EACXO,UAAWA,IAGb,cAAC,EAAD,CACEiB,KAAK,UACLhB,aAAcA,EACdK,UAAWZ,EACXM,UAAWA,EACXE,aAAcA,EACdC,gBAAiBA,KAGjBU,GAEE,cAAC,EAAD,CACEI,KAAK,QACLhB,aAAcA,EACdK,UAAU,QACVN,UAAWA,OAMnB,6BACGI,EAAalB,KAAI,SAAAC,GAAI,OACpB,cAAC,EAAD,CAAMA,KAAMA,GAAWA,EAAKE,aAOhC6B,EAAS,SAAC,GAET,IADLD,EACI,EADJA,KAAMhB,EACF,EADEA,aAAcK,EAChB,EADgBA,UAEhBa,GADA,EAD2BnB,UAC3B,EADsCE,aACtC,EADoDC,gBAEzC,UAEf,OAAQc,GACN,IAAK,sBAGCE,GADJvB,EACgB,WACA,oBAChB,MAEF,IAAK,iBAGCuB,GADJtB,EACgB,cACA,uBAChB,MAEF,IAAK,UAGCsB,GADJxB,EACgB,cACA,uBAChB,MAEF,IAAK,QAEHwB,GAAY,sBAOhB,OACE,wBACEC,KAAK,SACLJ,UAAWG,EACXE,QAAS,kBAAMpB,EAAaK,IAH9B,SAKGW,KAKDK,EAAO,SAAC,GAAD,IAAGnC,EAAH,EAAGA,KAAH,OACX,oBAAI,UAAQ,OAAZ,SACGA,EAAKC,QCjMVmC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.294c67af.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst goodsWithId = goodsFromServer.map(good => (\n  {\n    name: good,\n    // eslint-disable-next-line\n    id: self.crypto.randomUUID(),\n  }\n));\n\nlet renderedGoods;\n\nconst SORT_VALUE_NAME = 'name';\nconst SORT_VALUE_LENGTH = 'length';\nlet SORT_VALUE_REVERSE = 'reverse';\nlet isReversed = false;\nlet isAlpha = false;\nlet isLength = false;\n\nfunction getPreperedGoods(goods = goodsWithId, sortField, reverse) {\n  let preperedGoods = [...goods];\n\n  if (sortField !== SORT_VALUE_REVERSE) {\n    preperedGoods.sort((good, good2) => {\n      if (sortField === 'length') {\n        isLength = true;\n        isAlpha = false;\n        if (!isReversed) {\n          return good.name[sortField] - good2.name[sortField];\n        // eslint-disable-next-line\n        } else {\n          return good2.name[sortField] - good.name[sortField];\n        }\n      }\n\n      if (sortField === 'name') {\n        isAlpha = true;\n        isLength = false;\n\n        return good[sortField].localeCompare(good2[sortField]);\n      }\n\n      return 0;\n    });\n  }\n\n  if ((sortField === SORT_VALUE_REVERSE || isReversed)\n      && sortField !== SORT_VALUE_LENGTH) {\n    if (sortField === SORT_VALUE_REVERSE) {\n      isReversed = !isReversed;\n    }\n\n    SORT_VALUE_REVERSE += ' ';\n    preperedGoods.reverse();\n  }\n\n  if (sortField === 'reset') {\n    isAlpha = false;\n    isReversed = false;\n    isLength = false;\n    preperedGoods = [...goodsWithId];\n  }\n\n  renderedGoods = preperedGoods;\n\n  return preperedGoods;\n}\n\nexport const App = () => {\n  const [sortValue, setSortValue] = useState('');\n  const [reverseArray, setReverseArray] = useState(false);\n  const visibleGoods = getPreperedGoods(\n    renderedGoods, sortValue, reverseArray,\n  );\n  let isEqualToSourceGoods = false;\n  // eslint-disable-next-line\n  for (let i = 0; i < visibleGoods.length; i++) {\n    if (visibleGoods[i].id === goodsWithId[i].id) {\n      isEqualToSourceGoods = true;\n    } else {\n      isEqualToSourceGoods = false;\n      break;\n    }\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <Button\n          text=\"Sort alphabetically\"\n          setSortValue={setSortValue}\n          sortField={SORT_VALUE_NAME}\n          sortValue={sortValue}\n        />\n\n        <Button\n          text=\"Sort by length\"\n          setSortValue={setSortValue}\n          sortField={SORT_VALUE_LENGTH}\n          sortValue={sortValue}\n        />\n\n        <Button\n          text=\"Reverse\"\n          setSortValue={setSortValue}\n          sortField={SORT_VALUE_REVERSE}\n          sortValue={sortValue}\n          reverseArray={reverseArray}\n          setReverseArray={setReverseArray}\n        />\n\n        {!isEqualToSourceGoods\n          && (\n            <Button\n              text=\"Reset\"\n              setSortValue={setSortValue}\n              sortField=\"reset\"\n              sortValue={sortValue}\n            />\n          )\n        }\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <Good good={good} key={good.id} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nconst Button = ({\n  text, setSortValue, sortField, sortValue, reverseArray, setReverseArray,\n}) => {\n  let btnClass = 'button';\n\n  switch (text) {\n    case 'Sort alphabetically':\n      // eslint-disable-next-line\n      isAlpha\n        ? btnClass += ' is-info'\n        : btnClass += ' is-light is-info';\n      break;\n\n    case 'Sort by length':\n      // eslint-disable-next-line\n      isLength\n        ? btnClass += ' is-success'\n        : btnClass += ' is-light is-success';\n      break;\n\n    case 'Reverse':\n      // eslint-disable-next-line\n      isReversed\n        ? btnClass += ' is-warning'\n        : btnClass += ' is-light is-warning';\n      break;\n\n    case 'Reset':\n      // eslint-disable-next-line\n      btnClass += ' is-light is-danger';\n      break;\n\n    default:\n      break;\n  }\n\n  return (\n    <button\n      type=\"button\"\n      className={btnClass}\n      onClick={() => setSortValue(sortField)}\n    >\n      {text}\n    </button>\n  );\n};\n\nconst Good = ({ good }) => (\n  <li data-cy=\"Good\">\n    {good.name}\n  </li>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}