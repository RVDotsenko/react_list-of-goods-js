{"version":3,"sources":["App.jsx","index.jsx"],"names":["classNames","require","goodsWithId","map","good","name","id","self","crypto","randomUUID","SORT_VALUE_NAME","SORT_VALUE_LENGTH","SORT_VALUE_REVERSE","SORT_VALUE_RESET","activeFields","length","reverse","reset","initial","canChangeState","previousActivField","App","useState","sortValue","setSortValue","visibleGoods","goods","sortField","key","preperedGoods","sort","good2","localeCompare","getPreperedGoods","className","text","Button","buttonClass","button","type","onClick","GoodsList","Good","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af2a7d1a.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nconst classNames = require('classnames');\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst goodsWithId = goodsFromServer.map(good => (\n  {\n    name: good,\n    // eslint-disable-next-line\n    id: self.crypto.randomUUID(),\n  }\n));\n\nconst SORT_VALUE_NAME = 'name';\nconst SORT_VALUE_LENGTH = 'length';\nconst SORT_VALUE_REVERSE = 'reverse';\nconst SORT_VALUE_REREVERSE = 'reReverse';\nconst SORT_VALUE_RESET = 'reset';\n\nconst activeFields = {\n  name: false,\n  length: false,\n  reverse: false,\n  reset: false,\n  initial: true,\n};\n\nlet canChangeState = false;\nlet previousActivField = '';\n\nfunction getPreperedGoods(goods, sortField, reverse) {\n  previousActivField = sortField;\n\n  // eslint-disable-next-line\n  switch (true) {\n    case sortField === SORT_VALUE_REREVERSE:\n      activeFields.reverse = !activeFields.reverse;\n      break;\n\n    case sortField === SORT_VALUE_NAME && !activeFields.name:\n      activeFields.length = false;\n      canChangeState = true;\n      break;\n\n    case sortField === SORT_VALUE_LENGTH && !activeFields.length:\n      activeFields.name = false;\n      canChangeState = true;\n      break;\n\n    case sortField === SORT_VALUE_REVERSE:\n      canChangeState = true;\n      break;\n\n    case sortField === SORT_VALUE_RESET:\n      activeFields.reset = true;\n  }\n\n  if (canChangeState) {\n    canChangeState = false;\n    activeFields[sortField] = !activeFields[sortField];\n  }\n\n  // eslint-disable-next-line\n  for (const key in activeFields) {\n    if (activeFields[key] === true) {\n      activeFields.initial = true;\n      break;\n    } else {\n      activeFields.initial = false;\n    }\n  }\n\n  let preperedGoods = [...goods];\n\n  if (activeFields[SORT_VALUE_NAME]) {\n    preperedGoods.sort((good, good2) => (\n      good[SORT_VALUE_NAME].localeCompare(good2[SORT_VALUE_NAME])\n    ));\n  }\n\n  if (activeFields[SORT_VALUE_LENGTH]) {\n    preperedGoods.sort((good, good2) => (\n      good.name[SORT_VALUE_LENGTH] - good2.name[SORT_VALUE_LENGTH]\n    ));\n  }\n\n  if (activeFields[SORT_VALUE_REVERSE]) {\n    preperedGoods.reverse();\n  }\n\n  if (activeFields[SORT_VALUE_RESET]) {\n    activeFields.name = false;\n    activeFields.length = false;\n    activeFields.reverse = false;\n    activeFields.reset = false;\n    activeFields.initial = false;\n    preperedGoods = [...goodsWithId];\n  }\n\n  return preperedGoods;\n}\n\nexport const App = () => {\n  const [sortValue, setSortValue] = useState('initial');\n  const visibleGoods = getPreperedGoods(goodsWithId, sortValue);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <Button\n          text=\"Sort alphabetically\"\n          setSortValue={setSortValue}\n          sortField={SORT_VALUE_NAME}\n          sortValue={sortValue}\n        />\n\n        <Button\n          text=\"Sort by length\"\n          setSortValue={setSortValue}\n          sortField={SORT_VALUE_LENGTH}\n          sortValue={sortValue}\n        />\n\n        <Button\n          text=\"Reverse\"\n          setSortValue={setSortValue}\n          sortField={SORT_VALUE_REVERSE}\n          sortValue={sortValue}\n        />\n\n        {activeFields.initial\n          && (\n            <Button\n              text=\"Reset\"\n              setSortValue={setSortValue}\n              sortField={SORT_VALUE_RESET}\n              sortValue={sortValue}\n            />\n          )\n        }\n      </div>\n\n      <GoodsList visibleGoods={visibleGoods} />\n    </div>\n  );\n};\n\nconst Button = ({\n  text,\n  setSortValue,\n  sortField,\n  sortValue,\n}) => {\n  const buttonClass = classNames({\n    button: true,\n    'is-light': !activeFields[sortField],\n    'is-info': sortField === SORT_VALUE_NAME,\n    'is-success': sortField === SORT_VALUE_LENGTH,\n    'is-warning': sortField === SORT_VALUE_REVERSE,\n    'is-danger': sortField === SORT_VALUE_RESET,\n  });\n\n  return (\n    <button\n      type=\"button\"\n      className={buttonClass}\n      onClick={() => {\n        if (sortField === SORT_VALUE_REVERSE\n          && previousActivField === SORT_VALUE_REVERSE) {\n          setSortValue('reReverse');\n        } else {\n          setSortValue(sortField);\n        }\n      }}\n    >\n      {text}\n    </button>\n  );\n};\n\nconst GoodsList = ({ visibleGoods }) => (\n  <ul>\n    {visibleGoods.map(good => (\n      <Good good={good} key={good.id} />\n    ))}\n  </ul>\n);\n\nconst Good = ({ good }) => (\n  <li data-cy=\"Good\">\n    {good.name}\n  </li>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}